// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.2
// source: tes.proto

package tesproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TesFileType int32

const (
	TesFileType_FILE      TesFileType = 0
	TesFileType_DIRECTORY TesFileType = 1
)

// Enum value maps for TesFileType.
var (
	TesFileType_name = map[int32]string{
		0: "FILE",
		1: "DIRECTORY",
	}
	TesFileType_value = map[string]int32{
		"FILE":      0,
		"DIRECTORY": 1,
	}
)

func (x TesFileType) Enum() *TesFileType {
	p := new(TesFileType)
	*p = x
	return p
}

func (x TesFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TesFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_tes_proto_enumTypes[0].Descriptor()
}

func (TesFileType) Type() protoreflect.EnumType {
	return &file_tes_proto_enumTypes[0]
}

func (x TesFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TesFileType.Descriptor instead.
func (TesFileType) EnumDescriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{0}
}

type TesState int32

const (
	TesState_UNKNOWN        TesState = 0
	TesState_QUEUED         TesState = 1
	TesState_INITIALIZING   TesState = 2
	TesState_RUNNING        TesState = 3
	TesState_PAUSED         TesState = 4
	TesState_COMPLETE       TesState = 5
	TesState_EXECUTOR_ERROR TesState = 6
	TesState_SYSTEM_ERROR   TesState = 7
	TesState_CANCELED       TesState = 8
)

// Enum value maps for TesState.
var (
	TesState_name = map[int32]string{
		0: "UNKNOWN",
		1: "QUEUED",
		2: "INITIALIZING",
		3: "RUNNING",
		4: "PAUSED",
		5: "COMPLETE",
		6: "EXECUTOR_ERROR",
		7: "SYSTEM_ERROR",
		8: "CANCELED",
	}
	TesState_value = map[string]int32{
		"UNKNOWN":        0,
		"QUEUED":         1,
		"INITIALIZING":   2,
		"RUNNING":        3,
		"PAUSED":         4,
		"COMPLETE":       5,
		"EXECUTOR_ERROR": 6,
		"SYSTEM_ERROR":   7,
		"CANCELED":       8,
	}
)

func (x TesState) Enum() *TesState {
	p := new(TesState)
	*p = x
	return p
}

func (x TesState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TesState) Descriptor() protoreflect.EnumDescriptor {
	return file_tes_proto_enumTypes[1].Descriptor()
}

func (TesState) Type() protoreflect.EnumType {
	return &file_tes_proto_enumTypes[1]
}

func (x TesState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TesState.Descriptor instead.
func (TesState) EnumDescriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{1}
}

type TesCancelTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TesCancelTaskResponse) Reset() {
	*x = TesCancelTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesCancelTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesCancelTaskResponse) ProtoMessage() {}

func (x *TesCancelTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesCancelTaskResponse.ProtoReflect.Descriptor instead.
func (*TesCancelTaskResponse) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{0}
}

type TesCreateTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TesCreateTaskResponse) Reset() {
	*x = TesCreateTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesCreateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesCreateTaskResponse) ProtoMessage() {}

func (x *TesCreateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesCreateTaskResponse.ProtoReflect.Descriptor instead.
func (*TesCreateTaskResponse) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{1}
}

func (x *TesCreateTaskResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TesExecutor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command []string          `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	Env     map[string]string `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Image   string            `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Stderr  string            `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Stdin   string            `protobuf:"bytes,5,opt,name=stdin,proto3" json:"stdin,omitempty"`
	Stdout  string            `protobuf:"bytes,6,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Workdir string            `protobuf:"bytes,7,opt,name=workdir,proto3" json:"workdir,omitempty"`
}

func (x *TesExecutor) Reset() {
	*x = TesExecutor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesExecutor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesExecutor) ProtoMessage() {}

func (x *TesExecutor) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesExecutor.ProtoReflect.Descriptor instead.
func (*TesExecutor) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{2}
}

func (x *TesExecutor) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *TesExecutor) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TesExecutor) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *TesExecutor) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *TesExecutor) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

func (x *TesExecutor) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *TesExecutor) GetWorkdir() string {
	if x != nil {
		return x.Workdir
	}
	return ""
}

type TesExecutorLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime   string `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	ExitCode  int32  `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Stderr    string `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Stdout    string `protobuf:"bytes,5,opt,name=stdout,proto3" json:"stdout,omitempty"`
}

func (x *TesExecutorLog) Reset() {
	*x = TesExecutorLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesExecutorLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesExecutorLog) ProtoMessage() {}

func (x *TesExecutorLog) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesExecutorLog.ProtoReflect.Descriptor instead.
func (*TesExecutorLog) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{3}
}

func (x *TesExecutorLog) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TesExecutorLog) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *TesExecutorLog) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TesExecutorLog) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *TesExecutorLog) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

type TesInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content     string      `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Description string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Name        string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Path        string      `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Type        TesFileType `protobuf:"varint,5,opt,name=type,proto3,enum=tes.TesFileType" json:"type,omitempty"`
	Url         string      `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *TesInput) Reset() {
	*x = TesInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesInput) ProtoMessage() {}

func (x *TesInput) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesInput.ProtoReflect.Descriptor instead.
func (*TesInput) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{4}
}

func (x *TesInput) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TesInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TesInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TesInput) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TesInput) GetType() TesFileType {
	if x != nil {
		return x.Type
	}
	return TesFileType_FILE
}

func (x *TesInput) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TesListTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string     `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Tasks         []*TesTask `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *TesListTasksResponse) Reset() {
	*x = TesListTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesListTasksResponse) ProtoMessage() {}

func (x *TesListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesListTasksResponse.ProtoReflect.Descriptor instead.
func (*TesListTasksResponse) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{5}
}

func (x *TesListTasksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *TesListTasksResponse) GetTasks() []*TesTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type TesOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string      `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Name        string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path        string      `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Type        TesFileType `protobuf:"varint,4,opt,name=type,proto3,enum=tes.TesFileType" json:"type,omitempty"`
	Url         string      `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *TesOutput) Reset() {
	*x = TesOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesOutput) ProtoMessage() {}

func (x *TesOutput) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesOutput.ProtoReflect.Descriptor instead.
func (*TesOutput) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{6}
}

func (x *TesOutput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TesOutput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TesOutput) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TesOutput) GetType() TesFileType {
	if x != nil {
		return x.Type
	}
	return TesFileType_FILE
}

func (x *TesOutput) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TesOutputFileLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	SizeBytes string `protobuf:"bytes,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	Url       string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *TesOutputFileLog) Reset() {
	*x = TesOutputFileLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesOutputFileLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesOutputFileLog) ProtoMessage() {}

func (x *TesOutputFileLog) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesOutputFileLog.ProtoReflect.Descriptor instead.
func (*TesOutputFileLog) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{7}
}

func (x *TesOutputFileLog) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TesOutputFileLog) GetSizeBytes() string {
	if x != nil {
		return x.SizeBytes
	}
	return ""
}

func (x *TesOutputFileLog) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TesResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuCores    int32    `protobuf:"varint,1,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	DiskGb      float64  `protobuf:"fixed64,2,opt,name=disk_gb,json=diskGb,proto3" json:"disk_gb,omitempty"`
	Preemptible bool     `protobuf:"varint,3,opt,name=preemptible,proto3" json:"preemptible,omitempty"`
	RamGb       float64  `protobuf:"fixed64,4,opt,name=ram_gb,json=ramGb,proto3" json:"ram_gb,omitempty"`
	Zones       []string `protobuf:"bytes,5,rep,name=zones,proto3" json:"zones,omitempty"`
}

func (x *TesResources) Reset() {
	*x = TesResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesResources) ProtoMessage() {}

func (x *TesResources) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesResources.ProtoReflect.Descriptor instead.
func (*TesResources) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{8}
}

func (x *TesResources) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *TesResources) GetDiskGb() float64 {
	if x != nil {
		return x.DiskGb
	}
	return 0
}

func (x *TesResources) GetPreemptible() bool {
	if x != nil {
		return x.Preemptible
	}
	return false
}

func (x *TesResources) GetRamGb() float64 {
	if x != nil {
		return x.RamGb
	}
	return 0
}

func (x *TesResources) GetZones() []string {
	if x != nil {
		return x.Zones
	}
	return nil
}

type TesServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactUrl       string            `protobuf:"bytes,1,opt,name=contactUrl,proto3" json:"contactUrl,omitempty"`
	CreatedAt        string            `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Description      string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DocumentationUrl string            `protobuf:"bytes,4,opt,name=documentationUrl,proto3" json:"documentationUrl,omitempty"`
	Environment      string            `protobuf:"bytes,5,opt,name=environment,proto3" json:"environment,omitempty"`
	Id               string            `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	Name             string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Organization     map[string]string `protobuf:"bytes,8,rep,name=organization,proto3" json:"organization,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Storage          []string          `protobuf:"bytes,9,rep,name=storage,proto3" json:"storage,omitempty"`
	Type             *TesServiceType   `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	UpdatedAt        string            `protobuf:"bytes,11,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Version          string            `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *TesServiceInfo) Reset() {
	*x = TesServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesServiceInfo) ProtoMessage() {}

func (x *TesServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesServiceInfo.ProtoReflect.Descriptor instead.
func (*TesServiceInfo) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{9}
}

func (x *TesServiceInfo) GetContactUrl() string {
	if x != nil {
		return x.ContactUrl
	}
	return ""
}

func (x *TesServiceInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TesServiceInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TesServiceInfo) GetDocumentationUrl() string {
	if x != nil {
		return x.DocumentationUrl
	}
	return ""
}

func (x *TesServiceInfo) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *TesServiceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TesServiceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TesServiceInfo) GetOrganization() map[string]string {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *TesServiceInfo) GetStorage() []string {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *TesServiceInfo) GetType() *TesServiceType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TesServiceInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *TesServiceInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type TesServiceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifact string `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Group    string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Version  string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *TesServiceType) Reset() {
	*x = TesServiceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesServiceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesServiceType) ProtoMessage() {}

func (x *TesServiceType) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesServiceType.ProtoReflect.Descriptor instead.
func (*TesServiceType) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{10}
}

func (x *TesServiceType) GetArtifact() string {
	if x != nil {
		return x.Artifact
	}
	return ""
}

func (x *TesServiceType) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *TesServiceType) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type TesTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationTime string            `protobuf:"bytes,1,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Executors    []*TesExecutor    `protobuf:"bytes,3,rep,name=executors,proto3" json:"executors,omitempty"`
	Id           string            `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Inputs       []*TesInput       `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Logs         []*TesTaskLog     `protobuf:"bytes,6,rep,name=logs,proto3" json:"logs,omitempty"`
	Name         string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Outputs      []*TesOutput      `protobuf:"bytes,8,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Resources    *TesResources     `protobuf:"bytes,9,opt,name=resources,proto3" json:"resources,omitempty"`
	State        TesState          `protobuf:"varint,10,opt,name=state,proto3,enum=tes.TesState" json:"state,omitempty"`
	Tags         map[string]string `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Volumes      []string          `protobuf:"bytes,12,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *TesTask) Reset() {
	*x = TesTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesTask) ProtoMessage() {}

func (x *TesTask) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesTask.ProtoReflect.Descriptor instead.
func (*TesTask) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{11}
}

func (x *TesTask) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *TesTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TesTask) GetExecutors() []*TesExecutor {
	if x != nil {
		return x.Executors
	}
	return nil
}

func (x *TesTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TesTask) GetInputs() []*TesInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TesTask) GetLogs() []*TesTaskLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TesTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TesTask) GetOutputs() []*TesOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TesTask) GetResources() *TesResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TesTask) GetState() TesState {
	if x != nil {
		return x.State
	}
	return TesState_UNKNOWN
}

func (x *TesTask) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TesTask) GetVolumes() []string {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type TesTaskLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime    string              `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Logs       []*TesExecutorLog   `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
	Metadata   map[string]string   `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Outputs    []*TesOutputFileLog `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	StartTime  string              `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	SystemLogs []string            `protobuf:"bytes,6,rep,name=system_logs,json=systemLogs,proto3" json:"system_logs,omitempty"`
}

func (x *TesTaskLog) Reset() {
	*x = TesTaskLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TesTaskLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TesTaskLog) ProtoMessage() {}

func (x *TesTaskLog) ProtoReflect() protoreflect.Message {
	mi := &file_tes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TesTaskLog.ProtoReflect.Descriptor instead.
func (*TesTaskLog) Descriptor() ([]byte, []int) {
	return file_tes_proto_rawDescGZIP(), []int{12}
}

func (x *TesTaskLog) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *TesTaskLog) GetLogs() []*TesExecutorLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TesTaskLog) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TesTaskLog) GetOutputs() []*TesOutputFileLog {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TesTaskLog) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *TesTaskLog) GetSystemLogs() []string {
	if x != nil {
		return x.SystemLogs
	}
	return nil
}

var File_tes_proto protoreflect.FileDescriptor

var file_tes_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x74, 0x65, 0x73,
	0x22, 0x17, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x74, 0x65, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x82, 0x02, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x64, 0x69, 0x72, 0x1a,
	0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x22, 0xa6, 0x01, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x62, 0x0a, 0x14, 0x74, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x8d,
	0x01, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x57,
	0x0a, 0x10, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x67, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x47, 0x62, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x61, 0x6d, 0x5f, 0x67, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x72, 0x61, 0x6d, 0x47, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0xe9, 0x03,
	0x0a, 0x0e, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x55, 0x72, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74,
	0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x0a, 0x11, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x0e, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xef, 0x03, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x73,
	0x2e, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65,
	0x73, 0x2e, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74,
	0x65, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x02, 0x0a, 0x0a, 0x74, 0x65,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x73, 0x2e, 0x74,
	0x65, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x26, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x2a, 0x90, 0x01,
	0x0a, 0x08, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x08,
	0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x68, 0x73, 0x75, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x2d, 0x62, 0x69, 0x6f, 0x2f, 0x66, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tes_proto_rawDescOnce sync.Once
	file_tes_proto_rawDescData = file_tes_proto_rawDesc
)

func file_tes_proto_rawDescGZIP() []byte {
	file_tes_proto_rawDescOnce.Do(func() {
		file_tes_proto_rawDescData = protoimpl.X.CompressGZIP(file_tes_proto_rawDescData)
	})
	return file_tes_proto_rawDescData
}

var file_tes_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tes_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_tes_proto_goTypes = []interface{}{
	(TesFileType)(0),              // 0: tes.tesFileType
	(TesState)(0),                 // 1: tes.tesState
	(*TesCancelTaskResponse)(nil), // 2: tes.tesCancelTaskResponse
	(*TesCreateTaskResponse)(nil), // 3: tes.tesCreateTaskResponse
	(*TesExecutor)(nil),           // 4: tes.tesExecutor
	(*TesExecutorLog)(nil),        // 5: tes.tesExecutorLog
	(*TesInput)(nil),              // 6: tes.tesInput
	(*TesListTasksResponse)(nil),  // 7: tes.tesListTasksResponse
	(*TesOutput)(nil),             // 8: tes.tesOutput
	(*TesOutputFileLog)(nil),      // 9: tes.tesOutputFileLog
	(*TesResources)(nil),          // 10: tes.tesResources
	(*TesServiceInfo)(nil),        // 11: tes.tesServiceInfo
	(*TesServiceType)(nil),        // 12: tes.tesServiceType
	(*TesTask)(nil),               // 13: tes.tesTask
	(*TesTaskLog)(nil),            // 14: tes.tesTaskLog
	nil,                           // 15: tes.tesExecutor.EnvEntry
	nil,                           // 16: tes.tesServiceInfo.OrganizationEntry
	nil,                           // 17: tes.tesTask.TagsEntry
	nil,                           // 18: tes.tesTaskLog.MetadataEntry
}
var file_tes_proto_depIdxs = []int32{
	15, // 0: tes.tesExecutor.env:type_name -> tes.tesExecutor.EnvEntry
	0,  // 1: tes.tesInput.type:type_name -> tes.tesFileType
	13, // 2: tes.tesListTasksResponse.tasks:type_name -> tes.tesTask
	0,  // 3: tes.tesOutput.type:type_name -> tes.tesFileType
	16, // 4: tes.tesServiceInfo.organization:type_name -> tes.tesServiceInfo.OrganizationEntry
	12, // 5: tes.tesServiceInfo.type:type_name -> tes.tesServiceType
	4,  // 6: tes.tesTask.executors:type_name -> tes.tesExecutor
	6,  // 7: tes.tesTask.inputs:type_name -> tes.tesInput
	14, // 8: tes.tesTask.logs:type_name -> tes.tesTaskLog
	8,  // 9: tes.tesTask.outputs:type_name -> tes.tesOutput
	10, // 10: tes.tesTask.resources:type_name -> tes.tesResources
	1,  // 11: tes.tesTask.state:type_name -> tes.tesState
	17, // 12: tes.tesTask.tags:type_name -> tes.tesTask.TagsEntry
	5,  // 13: tes.tesTaskLog.logs:type_name -> tes.tesExecutorLog
	18, // 14: tes.tesTaskLog.metadata:type_name -> tes.tesTaskLog.MetadataEntry
	9,  // 15: tes.tesTaskLog.outputs:type_name -> tes.tesOutputFileLog
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_tes_proto_init() }
func file_tes_proto_init() {
	if File_tes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesCancelTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesCreateTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesExecutor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesExecutorLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesListTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesOutputFileLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesServiceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TesTaskLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tes_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tes_proto_goTypes,
		DependencyIndexes: file_tes_proto_depIdxs,
		EnumInfos:         file_tes_proto_enumTypes,
		MessageInfos:      file_tes_proto_msgTypes,
	}.Build()
	File_tes_proto = out.File
	file_tes_proto_rawDesc = nil
	file_tes_proto_goTypes = nil
	file_tes_proto_depIdxs = nil
}
