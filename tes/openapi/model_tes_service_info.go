/*
 * Task Execution Service
 *
 * ## Executive Summary The Task Execution Service (TES) API is a standardized schema and API for describing and executing batch execution tasks. A task defines a set of input files, a set of containers and commands to run, a set of output files and some other logging and metadata.  TES servers accept task documents and execute them asynchronously on available compute resources. A TES server could be built on top of a traditional HPC queuing system, such as Grid Engine, Slurm or cloud style compute systems such as AWS Batch or Kubernetes. ## Introduction This document describes the TES API and provides details on the specific endpoints, request formats, and responses. It is intended to provide key information for developers of TES-compatible services as well as clients that will call these TES services. Use cases include:    - Deploying existing workflow engines on new infrastructure. Workflow engines   such as CWL-Tes and Cromwell have extentions for using TES. This will allow   a system engineer to deploy them onto a new infrastructure using a job scheduling   system not previously supported by the engine.    - Developing a custom workflow management system. This API provides a common   interface to asynchronous batch processing capabilities. A developer can write   new tools against this interface and expect them to work using a variety of   backend solutions that all support the same specification.   ## Standards The TES API specification is written in OpenAPI and embodies a RESTful service philosophy. It uses JSON in requests and responses and standard HTTP/HTTPS for information transport. HTTPS should be used rather than plain HTTP except for testing or internal-only purposes. ### Authentication and Authorization Is is envisaged that most TES API instances will require users to authenticate to use the endpoints. However, the decision if authentication is required should be taken by TES API implementers.  If authentication is required, we recommend that TES implementations use an OAuth2  bearer token, although they can choose other mechanisms if appropriate.  Checking that a user is authorized to submit TES requests is a responsibility of TES implementations. ### CORS If TES API implementation is to be used by another website or domain it must implement Cross Origin Resource Sharing (CORS). Please refer to https://w3id.org/ga4gh/product-approval-support/cors for more information about GA4GHâ€™s recommendations and how to implement CORS. 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type TesServiceInfo struct {

	// Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.
	Id string `json:"id"`

	// Name of this service. Should be human readable.
	Name string `json:"name"`

	Type TesServiceType `json:"type"`

	// Description of the service. Should be human readable and provide information about the service.
	Description string `json:"description,omitempty"`

	Organization ServiceOrganization `json:"organization"`

	// URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).
	ContactUrl string `json:"contactUrl,omitempty"`

	// URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.
	DocumentationUrl string `json:"documentationUrl,omitempty"`

	// Timestamp describing when the service was first deployed and available (RFC 3339 format)
	CreatedAt time.Time `json:"createdAt,omitempty"`

	// Timestamp describing when the service was last updated (RFC 3339 format)
	UpdatedAt time.Time `json:"updatedAt,omitempty"`

	// Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.
	Environment string `json:"environment,omitempty"`

	// Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.
	Version string `json:"version"`

	// Lists some, but not necessarily all, storage locations supported by the service.
	Storage []string `json:"storage,omitempty"`

	// Lists all tesResources.backend_parameters keys supported by the service
	TesResourcesBackendParameters []string `json:"tesResources_backend_parameters,omitempty"`
}

// AssertTesServiceInfoRequired checks if the required fields are not zero-ed
func AssertTesServiceInfoRequired(obj TesServiceInfo) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"name": obj.Name,
		"type": obj.Type,
		"organization": obj.Organization,
		"version": obj.Version,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertTesServiceTypeRequired(obj.Type); err != nil {
		return err
	}
	if err := AssertServiceOrganizationRequired(obj.Organization); err != nil {
		return err
	}
	return nil
}

// AssertRecurseTesServiceInfoRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of TesServiceInfo (e.g. [][]TesServiceInfo), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTesServiceInfoRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTesServiceInfo, ok := obj.(TesServiceInfo)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTesServiceInfoRequired(aTesServiceInfo)
	})
}
